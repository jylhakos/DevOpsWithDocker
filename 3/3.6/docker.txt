RUN addgroup -S nonroot && adduser -S -D -h /app nonroot nonroot && chown nonroot:nonroot -R /app && chown nonroot:nonroot ./server

DOCKER REMOVE CONTAINERS AND IMAGES

$ docker stop $(docker ps -a -q)

$ docker rm $(docker ps -a -q)

$ docker rmi $(docker images -q)



Multi-Stage Builds 

The resulting image has five new layers: one for each statement in your Dockerfile

FROM node:8

EXPOSE 3000
WORKDIR /app
COPY package.json index.js ./
RUN npm install

CMD ["npm", "start"]

Squash multiple layers into one with multi-stage Docker builds

FROM node:8 as build

WORKDIR /app
COPY package.json index.js ./
RUN npm install

FROM node:8

COPY --from=build /app /
EXPOSE 3000
CMD ["index.js"]

The layers are then merged and copied across to the second and final stage.

Linux distribution that is smaller in size 

FROM node:8 as build

WORKDIR /app
COPY package.json index.js ./
RUN npm install

FROM node:8-alpine

COPY --from=build /app /
EXPOSE 3000
CMD ["npm", "start"]

Check the size with command

$ docker images | grep node-alpine

You can remove build tools from the final Docker image by using multi-stage builds. 

FROM golang:1.10-alpine3.8 AS multistage

RUN apk add --no-cache --update git

WORKDIR /go/src/api
COPY . .

RUN go get -d -v \
  && go install -v \
  && go build

##

FROM alpine:3.8
COPY --from=multistage /go/bin/api /go/bin/
EXPOSE 3000
CMD ["/go/bin/api"]

https://www.digitalocean.com/community/tutorials/how-to-optimize-docker-images-for-production

The multi-stage feature allows users to divide the Dockerfile into multiple stages.

FROM golang:1.11-alpine3.7 AS builder

WORKDIR /app
COPY main.go .
RUN go build -o server .

FROM alpine:3.7

WORKDIR /app

COPY --from=builder /app .

ENTRYPOINT ["./server"]

The scratch image is the most minimal image in Docker. 

FROM golang:1.11-alpine3.7 AS builder

WORKDIR /app
COPY main.go .
ARG CGO_ENABLED=0
RUN go build -o server .

FROM scratch

WORKDIR /app
COPY --from=builder /app .

ENTRYPOINT ["./server"]



A link to 

https://docs.docker.com/language/golang/build-images/




FROM golang:1.16-buster AS build

WORKDIR /app

COPY go.mod ./
COPY go.sum ./
RUN go mod download

COPY *.go ./

RUN go build -o /docker-gs-ping

FROM gcr.io/distroless/base-debian10

WORKDIR /

COPY --from=build /docker-gs-ping /docker-gs-ping

EXPOSE 8080

USER nonroot:nonroot

ENTRYPOINT ["/docker-gs-ping"]


Let’s try the multi-stage Docker build.

FROM golang:1.11 as builder

WORKDIR /app
COPY main.go .

RUN go build -o server .

FROM debian:stretch

WORKDIR /app
COPY --from=builder /app .

ENTRYPOINT ["./server"]

https://medium.com/@gdiener/how-to-build-a-smaller-docker-image-76779e18d48a

FROM golang:1.14.0-alpine

WORKDIR /go/src/github.com/songrgg/testservice/
COPY main.go .
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

FROM alpine:latest
RUN apk --no-cache add ca-certificates
WORKDIR /root/
COPY --from=0 /go/src/github.com/songrgg/testservice/app .
CMD ["./app"]


FROM ubuntu:16.04 as stage1

RUN apt-get update
RUN apt-get -y install make curl
RUN curl http://xyz.com/abc.tar.gz -O
RUN tar zxf abc.tar.gz && cd abc
RUN make DESTDIR=/tmp install

# Stage 2
FROM alpine:3.10

COPY --from=stage1 /tmp /ab



FROM node:16 as build

WORKDIR /app
COPY package.json index.js env ./
RUN npm install

FROM node:alpine as main

COPY --from=build /app /
EXPOSE 8080
CMD ["index.js"]

After the build is complete. Let’s check its size using

$ docker image ls

https://cloudnweb.dev/2019/10/crafting-multi-stage-builds-with-docker-in-node-js/

FROM node:10.15.2-alpine
WORKDIR /usr/src/app
COPY package.json ./
COPY .babelrc ./
RUN npm install
COPY --from=0 /usr/src/app/dist ./dist
EXPOSE 4002
CMD npm start

COPY --from=0 line copies just the build artifacts from previous stage into the new stage.

# Build Stage 1
# This build created a staging docker image
#
FROM node:10.15.2-alpine AS appbuild
WORKDIR /usr/src/app
COPY package.json ./
COPY .babelrc ./
RUN npm install
COPY ./src ./src
RUN npm run build
# Build Stage 2
# This build takes the production build from staging build
#
FROM node:10.15.2-alpine
WORKDIR /usr/src/app
COPY package.json ./
COPY .babelrc ./
RUN npm install
COPY --from=appbuild /usr/src/app/dist ./dist
EXPOSE 4002
CMD npm start

Create a docker-compose.yml file

version: "3"
services:
  app:
    container_name: app
    restart: always
    build: .
    environment:
      - PORT=4002
    ports:
      - "4002:4002"
    links:
      - mongo
  mongo:
    container_name: mongo
    image: mongo
    volumes:
      - ./data:/data/db
    ports:
      - "27017:27017"
      
      
$ docker-compose up


Creating a multi-stage Dockerfile for Node.js


# ---- Base Node ----
FROM alpine:3.5 AS base
# install node
RUN apk add --no-cache nodejs-current tini
# set working directory
WORKDIR /root/chat
# Set tini as entrypoint
ENTRYPOINT ["/sbin/tini", "--"]
# copy project file
COPY package.json .
#
# ---- Dependencies ----
FROM base AS dependencies
# install node packages
RUN npm set progress=false && npm config set depth 0
RUN npm install --only=production 
# copy production node_modules aside
RUN cp -R node_modules prod_node_modules
# install ALL node_modules, including 'devDependencies'
RUN npm install
#
# ---- Test ----
# run linters, setup and tests
FROM dependencies AS test
COPY . .
RUN  npm run lint && npm run setup && npm run test
#
# ---- Release ----
FROM base AS release
# copy production node_modules
COPY --from=dependencies /root/chat/prod_node_modules ./node_modules
# copy app sources
COPY . .
# expose port and define CMD
EXPOSE 5000
CMD npm run start


Multi-stage build is a Dockerfile feature introduced in v17.05


FROM node as builder
WORKDIR /root/
COPY ["package.json", "package-lock.json", "./"]
RUN ["npm", "install"]
COPY ["webpack.config.js", "./"]
COPY ["src/", "./src/"]
RUN ["npm", "run", "build"]
RUN ["/bin/bash", "-c", "find . ! -name dist ! -name node_modules -maxdepth 1 -mindepth 1 -exec rm -rf {} \\;"]

FROM node
WORKDIR /root/
COPY --from=builder /root/ ./
ENTRYPOINT ["node", "/root/node_modules/.bin/http-server" , "./dist/"]
EXPOSE 8080

we should update our Dockerfile to use node:alpine instead of node for our final image 


FROM node as builder
WORKDIR /root/
COPY ["package.json", "package-lock.json", "./"]
RUN ["npm", "install"]
COPY ["webpack.config.js", "./"]
COPY ["src/", "./src/"]
RUN ["npm", "run", "build"]
RUN ["/bin/bash", "-c", "find . ! -name dist ! -name node_modules -maxdepth 1 -mindepth 1 -exec rm -rf {} \\;"]

FROM node:alpine
WORKDIR /root/
COPY --from=builder /root/ ./
ENTRYPOINT ["node", "/root/node_modules/.bin/http-server" , "./dist/"]
EXPOSE 8080

Dockerfile


FROM node:14-alpine AS base
RUN mkdir -p /home/node/app
RUN chown -R node:node /home/node && chmod -R 770 /home/node
WORKDIR /home/node/app

FROM base AS builder-server
WORKDIR /home/node/app
RUN apk add --no-cache --virtual .build-deps git make python g++
COPY --chown=node:node ./package.json ./package.json
COPY --chown=node:node ./package-lock.json ./package-lock.json
USER node
RUN npm install --loglevel warn --production

FROM builder-server AS builder-client
WORKDIR /home/node/app
COPY --chown=node:node . ./
USER node
RUN npm install --loglevel warn && npm run build
EXPOSE 3000
CMD ["npm", "run", "dev"]

FROM base AS production
WORKDIR /home/node/app
USER node
COPY --chown=node:node --from=builder-client /home/node/app/dist ./dist/
COPY --chown=node:node --from=builder-server /home/node/app/node_modules ./node_modules
COPY --chown=node:node ./package.json ./package.json
COPY --chown=node:node ./package-lock.json ./package-lock.json
COPY --chown=node:node ./assets ./assets
COPY --chown=node:node ./bin ./bin
COPY --chown=node:node ./src ./src
EXPOSE 3000
CMD ["npm", "start"]

Docker-compose

version: '3.4'
services:
  web:
    build:
      context: .
      target: builder-client
    ports:
     - "3000:3000"


Dockerfile

FROM node:12.13.0-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

FROM nginx
EXPOSE 3000
COPY ./nginx/default.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/build /usr/share/nginx/html

An example

FROM node:10-alpine as builder

WORKDIR /build
COPY package.json .
COPY package-lock.json .
RUN npm ci --only=production
RUN cp -R node_modules prod_node_modules
RUN npm ci

# Copy src code and tests into the build container
# Preferable explicitly rather than copying everything
# if doing this consider using .dockerignore

COPY . .
# Run linting, tests etc
RUN npm run lint
RUN npm run test
FROM node:10-alpine
COPY --from=builder /build/prod_node_modules ./node_modules
# Again be explicate about what you copy
COPY --from=builder /build/ .
CMD ["node", "server.js"]
    
An example

FROM node:12-alpine AS BUILD_IMAGE

# couchbase sdk requirements
RUN apk update && apk add python make g++ && rm -rf /var/cache/apk/*

WORKDIR /usr/src/app

COPY package.json yarn.lock ./

# install dependencies
RUN yarn --frozen-lockfile

COPY . .

# lint & test
# RUN yarn lint & yarn test

# build application
RUN yarn build

FROM node:12-alpine

WORKDIR /usr/src/app

# copy from build image
COPY --from=BUILD_IMAGE /usr/src/app/dist ./dist
COPY --from=BUILD_IMAGE /usr/src/app/node_modules ./node_modules

EXPOSE 3030

CMD [ "node", "./dist/Main.js" ]


$ docker images | grep api

    
      
